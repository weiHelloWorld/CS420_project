#!/bin/bash
#PBS -q cs
#PBS -l walltime=00:30:00
#PBS -l nodes=1:PHI5100:ppn=24
#PBS -N project_cs420
#PBS -j oe

# Move to the current directory
module load intel/15.0 # temp, to be deleted
cd $PBS_O_WORKDIR

# It turns out that MPI is incorrectly allocating OpenMP procs and MPI ranks. 
# This code from MP4 (somehow) fixes the issue. 
# module load mvapich2/2.1rc1-intel-15.0 
# uniq ${PBS_NODEFILE} > /tmp/${USER}_NODEFILE
# hst="-hostfile /tmp/${USER}_NODEFILE"

# List of programs to be run
programs="MPI_cannon naive"

# Taken from mp3 batch_script_mic.run
mic_lib="export LD_LIBRARY_PATH=/usr/local/intel/intel-15.0/composer_xe_2015.0.090/compiler/lib/mic:/usr/local/intel/intel-15.0/composer_xe_2015.0.090/mpirt/lib/mic:/usr/local/intel/intel-15.0/composer_xe_2015.0.090/mkl/lib/mic:/usr/local/intel/intel-15.0/composer_xe_2015.0.090/tbb/lib/mic; export PATH=/usr/local/intel/intel-15.0/impi/5.0.1.035/mic/bin:${PATH};"
local_dir=$PBS_O_WORKDIR

set +x

for program in $programs
do
    out_file_name="${local_dir}/out_fast_${program}_xeoncop.txt"
    exec_program="./$program.mic"
    lscpu >> ${out_file_name}
    echo " " >> ${out_file_name}
    # ssh mic0 "${mic_lib} cat /proc/cpuinfo >> xeon_phi_coprocessor.txt" # Will be in home directory

    # Matrix Size Test: Increasing size with const. threads and ranks
    # Takes approx. 2.5 mins in total for each program
    echo "------------------------------------------" >> ${out_file_name}
    echo "$program variable matrix sizes" >> ${out_file_name}
    echo "------------------------------------------" >> ${out_file_name}

    for size in {3000..15000..3000}
    do
        echo "Running $exec_program with size=${size}" >> ${out_file_name}
        # export OMP_NUM_THREADS=1
        ssh mic0 "${mic_lib} mpirun -n 225 ${local_dir}/${exec_program} ${size} ${size} ${size} 15 4 1 1 >> ${out_file_name}"
        echo " " >> ${out_file_name}
    done

    # Square matrices of constant size and increasing ranks
    # Takes approx. 3 min in total for each program
    size=6000
    echo "------------------------------------------" >> ${out_file_name}
    echo "$program variable ranks" >> ${out_file_name}
    echo "------------------------------------------" >> ${out_file_name}

    for ranks in {5..15..5}
    do
        echo "Running ${exec_program} with ranks=${ranks}*${ranks}" >> ${out_file_name}
        # export OMP_NUM_THREADS=1
        ssh mic0 "${mic_lib} mpirun -n $((ranks*ranks)) ${local_dir}/${exec_program} ${size} ${size} ${size} ${ranks} 4 1 1 >> ${out_file_name}"
        echo " " >> ${out_file_name}
    done

    # OpenMP Testing: Increasing number of threads 
    # Takes approx. 6 min in total for each program
    # size=15000
    # echo "------------------------------------------" >> ${out_file_name}
    # echo "$program variable threads" >> ${out_file_name}
    # echo "------------------------------------------" >> ${out_file_name}

    # for threads in 10 12 20
    # do
    #     echo "Running ${exec_program} with threads=${threads}" >> ${out_file_name}
    #     export OMP_NUM_THREADS=${threads}
    #     mpirun -np 1 ${hst} ${exec_program} ${size} ${size} ${size} 1 4 1 ${threads} >> ${out_file_name}
    #     echo " " >> ${out_file_name}
    # done

    # Hybrid OpenMP/MPI Testing: Increasing number of threads while decreasing ranks 
    # Takes approx. 12 min in total for each program
    size=6000
    echo "------------------------------------------" >> ${out_file_name}
    echo "$program Hybrid OpenMP/MPI Test" >> ${out_file_name}
    echo "------------------------------------------" >> ${out_file_name}

    threads_list=(1 2 3 4 6 10)
    ranks_row_list=(10 7 6 5 4 3)

    for i in {0..5}
    do
        threads=${threads_list[$i]}
        ranks=${ranks_row_list[$i]}
        export OMP_NUM_THREADS=${threads}
        echo "Running ${exec_program} with threads=${threads} and ranks=${ranks}*${ranks}" >> ${out_file_name}
        ssh mic0 "${mic_lib} mpirun -n $((ranks*ranks)) ${local_dir}/${exec_program} ${size} ${size} ${size} ${ranks} 4 1 ${threads} >> ${out_file_name}"
        echo " " >> ${out_file_name}
    done

done

# Notes

