#!/bin/bash
#PBS -q cs
#PBS -l walltime=01:00:00
#PBS -l nodes=1:ppn=24:golub
#PBS -N project_cs420
#PBS -j oe

# Move to the current directory
module load intel/15.0 # temp, to be deleted
cd $PBS_O_WORKDIR

# It turns out that MPI is incorrectly allocating OpenMP procs and MPI ranks. 
# This code from MP4 (somehow) fixes the issue. 
module load mvapich2/2.1rc1-intel-15.0 
uniq ${PBS_NODEFILE} > /tmp/${USER}_NODEFILE
hst="-hostfile /tmp/${USER}_NODEFILE"

# List of programs to be run
programs="naive"

for program in $programs
do
    out_file_name="out_mmm3.txt"
    exec_program="./$program.exe"
    lscpu >> ${out_file_name}
    echo " " >> ${out_file_name}

    echo "------------------------------------------" >> ${out_file_name}
    echo "$program variable mmm type and size" >> ${out_file_name}
    echo "------------------------------------------" >> ${out_file_name}

    # for mmm_type in 3 4
    # do
    #     for size in 100 200 300 500 700 1000 2000 3000 4000 5000
    #     do 
    #         echo "Running $exec_program with mmm_type=${mmm_type} and size=${size}" >> ${out_file_name}
    #         export OMP_NUM_THREADS=1
    #         mpirun -np 1 ${hst} ${exec_program} ${size} ${size} ${size} 1 ${mmm_type} 50 1 >> ${out_file_name}
    #         echo " " >> ${out_file_name}
    #     done
    # done

    size=5000
    echo "------------------------------------------" >> ${out_file_name}
    echo "$program variable blocksize" >> ${out_file_name}
    echo "------------------------------------------" >> ${out_file_name}

    for blocksize in 20 40 50 100 200 250 500 1000
    do
        echo "Running ${exec_program} with blocksize=${blocksize}" >> ${out_file_name}
        export OMP_NUM_THREADS=1
        mpirun -np 1 ${hst} ${exec_program} ${size} ${size} ${size} 1 3 ${blocksize} 1 >> ${out_file_name}
        echo " " >> ${out_file_name}
    done

    # OpenMP Testing: Increasing number of threads 
    # Takes approx. 6 min in total for each program
    # size=15000
    # echo "------------------------------------------" >> ${out_file_name}
    # echo "$program variable threads" >> ${out_file_name}
    # echo "------------------------------------------" >> ${out_file_name}

    # for threads in 10 12 20
    # do
    #     echo "Running ${exec_program} with threads=${threads}" >> ${out_file_name}
    #     export OMP_NUM_THREADS=${threads}
    #     mpirun -np 1 ${hst} ${exec_program} ${size} ${size} ${size} 1 4 1 ${threads} >> ${out_file_name}
    #     echo " " >> ${out_file_name}
    # done

    # Hybrid OpenMP/MPI Testing: Increasing number of threads while decreasing ranks 
    # Takes approx. 12 min in total for each program
    # size=12600
    # echo "------------------------------------------" >> ${out_file_name}
    # echo "$program Hybrid OpenMP/MPI Test" >> ${out_file_name}
    # echo "------------------------------------------" >> ${out_file_name}

    # threads_list=(1 2 3 4 6 10)
    # ranks_row_list=(10 7 6 5 4 3)

    # for i in {0..5}
    # do
    #     threads=${threads_list[$i]}
    #     ranks=${ranks_row_list[$i]}
    #     export OMP_NUM_THREADS=${threads}
    #     echo "Running ${exec_program} with threads=${threads} and ranks=${ranks}*${ranks}" >> ${out_file_name}
    #     mpirun -np $((ranks*ranks)) ${hst} ${exec_program} ${size} ${size} ${size} ${ranks} 4 1 ${threads} >> ${out_file_name}
    #     echo " " >> ${out_file_name}
    # done

done

# Notes

